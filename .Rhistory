semiconductor=read.csv(D:/School Stuff/Graduate School/DMDS/ECO395M/data/semiconductor.csv)
semiconductor=read.csv(D:School Stuff/Graduate School/DMDS/ECO395M/data/semiconductor.csv)
semiconductor=read.csv(semiconductor.csv)
semiconductor <- read.csv("D:/School Stuff/Graduate School/DMDS/ECO395M/data/semiconductor.csv")
View(semiconductor)
n = nrow(semiconductor)
head(semiconductor)
## full model
full = glm(FAIL ~ ., data=semiconductor, family=binomial)
n
## A forward stepwise procedure
# null model
null = glm(FAIL~1, data=semiconductor)
# forward stepwise: it takes a long time!
system.time(fwd <- step(null, scope=formula(full), dir="forward"))
length(coef(fwd)) # chooses around 70 coef
install.packages("gamlr")
library(gamlr)
# for gamlr, and most other functions, you need to create your own numeric
# design matrix.  We'll do this as a sparse `simple triplet matrix' using
# the sparse.model.matrix function.
scx = sparse.model.matrix(FAIL ~ ., data=semiconductor)[,-1] # do -1 to drop intercept!
scy = semiconductor$FAIL # pull out `y' too just for convenience
# fit a single lasso
sclasso = gamlr(scx, scy, family="binomial")
plot(sclasso) # the path plot!
# AIC selected coef
# note: AICc = AIC with small-sample correction.  See ?AICc
AICc(sclasso)
plot(sclasso$lambda, AICc(sclasso))
plot(log(sclasso$lambda), AICc(sclasso))
# the coefficients at the AIC-optimizing value
# note the sparsity
scbeta = coef(sclasso)
scbeta
# optimal lambda
log(sclasso$lambda[which.min(AICc(sclasso))])
sum(scbeta!=0) # chooses 30 (+intercept) @ log(lambda) = -4.5
# Now without the AIC approximation:
# cross validated lasso (verb just prints progress)
sccvl = cv.gamlr(scx, scy, family="binomial", verb=TRUE)
# plot the out-of-sample deviance as a function of log lambda
# Q: what are the bars associated with each dot?
plot(sccvl, bty="n")
## CV min deviance selection
scb.min = coef(sccvl, select="min")
log(sccvl$lambda.min)
sum(scb.min!=0) # note: this is random!  because of the CV randomness
plot(sccvl, bty="n")
lines(log(sclasso$lambda),AICc(sclasso)/n, col="green", lwd=2)
legend("top", fill=c("blue","green"),
legend=c("CV","AICc"), bty="n")
beer=read.csv("D:/School Stuff/Graduate School/DMDS/ECO395M/data/smallbeer.csv")
beer=read.csv("D:/School Stuff/Graduate School/DMDS/ECO395M/data/smallbeer.csv")
colClasses=c(rep("factor",3),rep("numeric",2)))
beer = read.csv(""D:/School Stuff/Graduate School/DMDS/ECO395M/data/smallbeer.csv",
colClasses=c(rep("factor",3),rep("numeric",2)))
beer = read.csv(""D:/School Stuff/Graduate School/DMDS/ECO395M/data/smallbeer.csv", colClasses=c(rep("factor",3),rep("numeric",2)))
beer = read.csv("D:/School Stuff/Graduate School/DMDS/ECO395M/data/smallbeer.csv", colClasses=c(rep("factor",3),rep("numeric",2)))
head(beer)
nrow(beer)
allforone = lm(log(units) ~ log(price), data=beer)
coef(allforone)
# independent elasticities for each beer
oneforall = lm(log(units) ~ log(price)*item, data=beer)
# tons of NAs, lots of noisy coefficients
coef(oneforall)
hist(coef(oneforall)) ## super noisy zeros
# build some regression designs
library(gamlr)
hist(coef(oneforall, 100)) ## super noisy zeros
x1 = sparse.model.matrix(~price*item + factor(week)-1, data=beer)
x1
ml1 = cv.gamlr(x=x1, y=log(beer$units), free = 1, standardize=FALSE, verb=TRUE)
x1 = sparse.model.matrix(~log(price*item + factor(week)-1, data=beer))
x1 = sparse.model.matrix(~log(price)*item + factor(week)-1, data=beer)
head(x1)
coef(ml1)
# how can I get the elasticities?
price_main = coef(ml1)[2]
price_main
which_int = grep("price:item", rownames(coef(ml1)), fixed=TRUE)
price_int = coef(ml1)[which_int]
# these look much more reasonable, though not all negative
# of course price is not exogenous here!
hist(price_main + price_int)
which_int
hist(price_main + price_int, 50)
# how can I get the elasticities?
price_main = coef(ml1)[2]
which_int = grep("log(price):item", rownames(coef(ml1)), fixed=TRUE)
price_int = coef(ml1)[which_int]
# these look much more reasonable, though not all negative
# of course price is not exogenous here!
hist(price_main + price_int)
# these look much more reasonable, though not all negative
# of course price is not exogenous here!
hist(price_main + price_int)
x1 = sparse.model.matrix(~log(price)*item + factor(week)-1, data=beer)
ml1 = cv.gamlr(x=x1, y=log(beer$units), free = 1, standardize=FALSE, verb=TRUE)
# how can I get the elasticities?
price_main = coef(ml1)[2]
which_int = grep("price:item", rownames(coef(ml1)), fixed=TRUE)
price_int = coef(ml1)[which_int]
# these look much more reasonable, though not all negative
# of course price is not exogenous here!
hist(price_main + price_int)
# these look much more reasonable, though not all negative
# of course price is not exogenous here!
hist(price_main + price_int, 50)
head(beer)
nrow(beer)
# pooled fit: one elasticity for all beers
allforone = lm(log(units) ~ log(price), data=beer)
coef(allforone)
# independent elasticities for each beer
oneforall = lm(log(units) ~ log(price)*item, data=beer)
# build some regression designs
library(gamlr)
x1 = sparse.model.matrix(~log(price)*item + factor(week)-1, data=beer)
head(x1)
ml1 = cv.gamlr(x=x1, y=log(beer$units), free = 1, standardize=FALSE, verb=TRUE)
coef(ml1)
# how can I get the elasticities?
price_main = coef(ml1)[2]
which_int = grep("price:item", rownames(coef(ml1)), fixed=TRUE)
price_int = coef(ml1)[which_int]
# these look much more reasonable, though not all negative
# of course price is not exogenous here!
hist(price_main + price_int)
x1 = sparse.model.matrix(~price*item + factor(week)-1, data=beer)
head(x1)
ml1 = cv.gamlr(x=x1, y=log(beer$units), free = 1, standardize=FALSE, verb=TRUE)
coef(ml1)
# how can I get the elasticities?
price_main = coef(ml1)[2]
price_main
which_int = grep("price:item", rownames(coef(ml1)), fixed=TRUE)
which_int
price_int = coef(ml1)[which_int]
# these look much more reasonable, though not all negative
# of course price is not exogenous here!
hist(price_main + price_int)
hist(price_main + price_int, 50)
# OML steps 1-2
xitem = sparse.model.matrix(~item-1, data=beer)
xweek = sparse.model.matrix(~week-1, data=beer)
xx = cbind(xweek, xitem)
xitem
xweek
xx
# variation in price predicted by item and week
pfit = cv.gamlr(x=xx, y=log(beer$price), lmr=1e-5, standardize=FALSE)
pfit
# variation in quantity sold predicted by item and week
qfit = cv.gamlr(x=xx, y=log(beer$units), lmr=1e-5, standardize=FALSE)
# Calculate residuals: variation in price and units sold that
# cannot be predicted by item and week
lpr = drop(log(beer$price) - predict(pfit, xx))
lqr = drop(log(beer$units) - predict(qfit, xx))
# parse the item description text
# each individual word in the title becomes a predictor
# why is this helping here?
library(tm)
install.packages("tm")
library(tm)
beer$description
descr = Corpus(VectorSource(as.character(beer$description)))
xtext = DocumentTermMatrix(descr)
xtext = sparseMatrix(i=xtext$i,j=xtext$j,x=as.numeric(xtext$v>0), # convert from stm to Matrix format
dims=dim(xtext),dimnames=dimnames(xtext))
xtext
xtreat = cBind(1,xtext,xweek)
ofit = gamlr(x=lpr*xtreat, y=lqr, standardize=FALSE, free=1)
gams = coef(ofit)[-1,]
ofit = cv.gamlr(x=lpr*xtreat, y=lqr, standardize=FALSE, free=1)
gams = coef(ofit)[-1,]
gams
coef(ofit)
# create a testing matrix, matching each level to a row in X
test_ind = match(levels(beer$item),beer$item)
xtest = xtext[test_ind,]
rownames(xtest) = beer$description[test_ind]
# translate into elasticities and plot
el = drop(gams[1] + xtest%*%gams[(1:ncol(xtext))+1])
hist(el, xlab="OML elasticities", xlim=c(-6,1), col="lightblue", main="",breaks=7)
ofit = gamlr(x=lpr*xtreat, y=lqr, standardize=FALSE, free=1)
gams = coef(ofit)[-1,]
# create a testing matrix, matching each level to a row in X
test_ind = match(levels(beer$item),beer$item)
xtest = xtext[test_ind,]
rownames(xtest) = beer$description[test_ind]
# translate into elasticities and plot
el = drop(gams[1] + xtest%*%gams[(1:ncol(xtext))+1])
hist(el, xlab="OML elasticities", xlim=c(-6,1), col="lightblue", main="",breaks=7)
coef(ofit)
# high and low sensitivity brands
names(sort(el)[1:20])
names(sort(-el)[1:20])
knitr::opts_chunk$set(echo = TRUE)
```{r table1, echo=FALSE}
View("D:School Stuff/Graduate School/DMDS/HW Stuff/eco395m_Milo_HW/eco395m_Milo_HW/Exercise 3/ex3table4.png")
! [Alt text] (/School Stuff/Graduate School/DMDS/HW Stuff/eco395m_Milo_HW/eco395m_Milo_HW/Exercise 3/ex3table2.png)
?!
a
!
a
![ex3table2] (/School Stuff/Graduate School/DMDS/HW Stuff/eco395m_Milo_HW/eco395m_Milo_HW/Exercise 3/ex3table2.png)
! [ex3table2] (/School Stuff/Graduate School/DMDS/HW Stuff/eco395m_Milo_HW/eco395m_Milo_HW/Exercise 3/ex3table2.png)
! (/School Stuff/Graduate School/DMDS/HW Stuff/eco395m_Milo_HW/eco395m_Milo_HW/Exercise 3/ex3table2.png)
getwd()
getwd()
setwd(D:/School Stuff/Graduate School/DMDS)
?setwd
getwd()
setwd("D:/School Stuff/Graduate School/DMDS")
getwd()
! [ex3table2] (HW Stuff/eco395m_Milo_HW/eco395m_Milo_HW/Exercise 3/ex3table2.png)
?Alt Text
![Alt text] (HW Stuff/eco395m_Milo_HW/eco395m_Milo_HW/Exercise 3/ex3table2.png)
library(rmarkdown)
![Alt text] (HW Stuff/eco395m_Milo_HW/eco395m_Milo_HW/Exercise 3/ex3table2.png)
![ex3table2] (/School Stuff/Graduate School/DMDS/HW Stuff/eco395m_Milo_HW/eco395m_Milo_HW/Exercise 3/ex3table2.png)
!ex3table2 (/School Stuff/Graduate School/DMDS/HW Stuff/eco395m_Milo_HW/eco395m_Milo_HW/Exercise 3/ex3table2.png)
!ex3table2
!ex3table2 (/School Stuff/Graduate School/DMDS/HW Stuff/eco395m_Milo_HW/eco395m_Milo_HW/Exercise 3/ex3table2.png)
!ex3table2 (HW Stuff/eco395m_Milo_HW/eco395m_Milo_HW/Exercise 3/ex3table2.png)
setwd("D:/School Stuff/Graduate School/DMDS/HW Stuff/eco395m_Milo_HW/eco395m_Milo_HW")
getwd()
library("png")
readPNG("D:/School Stuff/Graduate School/DMDS/HW Stuff/eco395m_Milo_HW/eco395m_Milo_HW/Exercise 3/ex3table2.png")
pp<-readPNG("D:/School Stuff/Graduate School/DMDS/HW Stuff/eco395m_Milo_HW/eco395m_Milo_HW/Exercise 3/ex3table2.png")
plot.new()
rasterImage(pp,0,0,1,1)
readPNG("D:/School Stuff/Graduate School/DMDS/HW Stuff/eco395m_Milo_HW/eco395m_Milo_HW/Exercise 3/ex3table2.png")
pp<-readPNG("D:/School Stuff/Graduate School/DMDS/HW Stuff/eco395m_Milo_HW/eco395m_Milo_HW/Exercise 3/ex3table2.png")
plot.new()
rasterImage(pp,0,0,1,1)
readPNG("D:/School Stuff/Graduate School/DMDS/HW Stuff/eco395m_Milo_HW/eco395m_Milo_HW/Exercise 3/ex3table2.png")
pp<-readPNG("D:/School Stuff/Graduate School/DMDS/HW Stuff/eco395m_Milo_HW/eco395m_Milo_HW/Exercise 3/ex3table2.png")
plot.new()
rasterImage(pp,0,0,1,1)
library("png")
readPNG("D:/School Stuff/Graduate School/DMDS/HW Stuff/eco395m_Milo_HW/eco395m_Milo_HW/Exercise 3/ex3table2.png")
pp<-readPNG("D:/School Stuff/Graduate School/DMDS/HW Stuff/eco395m_Milo_HW/eco395m_Milo_HW/Exercise 3/ex3table2.png")
plot.new()
rasterImage(pp,0,0,1,1)
library("png")
pp1<-readPNG("D:/School Stuff/Graduate School/DMDS/HW Stuff/eco395m_Milo_HW/eco395m_Milo_HW/Exercise 3/ex3table2.png")
plot.new()
rasterImage(pp1,0,0,1,1)
pp2<-readPNG("D:/School Stuff/Graduate School/DMDS/HW Stuff/eco395m_Milo_HW/eco395m_Milo_HW/Exercise 3/ex3table4.png")
plot.new()
rasterImage(pp,0,0,1,1)
plot.new()
rasterImage(pp2,0,0,1,1)
GB <- read.csv("D:/School Stuff/Graduate School/DMDS/ECO395M/data/greenbuildings.csv", header=TRUE)
view(GB)
View(GB)
plot.new(D:/School Stuff/Graduate School/DMDS/HW Stuff/eco395m_Milo_HW/eco395m_Milo_HW/Exercise 3/Images/ex3table2.png)
pp2<-readPNG("D:/School Stuff/Graduate School/DMDS/HW Stuff/eco395m_Milo_HW/eco395m_Milo_HW/Exercise 3/Images/ex3table4.png")
plot.new()
rasterImage(pp2,0,0,1,1)
library("png")
pp1<-readPNG("D:/School Stuff/Graduate School/DMDS/HW Stuff/eco395m_Milo_HW/eco395m_Milo_HW/Exercise 3/Images/ex3table2.png")
plot.new()
rasterImage(pp1,0,0,1,1)
library("png")
library("png")
pp1<-readPNG("D:/School Stuff/Graduate School/DMDS/HW Stuff/eco395m_Milo_HW/eco395m_Milo_HW/Exercise 3/Images/ex3table2.png")
plot.new()
rasterImage(pp1,0,0,1,1)
library("png")
pp1<-readPNG("D:/School Stuff/Graduate School/DMDS/HW Stuff/eco395m_Milo_HW/eco395m_Milo_HW/Exercise 3/Images/ex3table2.png")
plot.new()
rasterImage(pp1,0,0,1,1)
[Alt text]
Alt text()
